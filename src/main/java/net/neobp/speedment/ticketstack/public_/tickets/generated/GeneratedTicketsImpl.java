package net.neobp.speedment.ticketstack.public_.tickets.generated;

import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;
import javax.annotation.Generated;
import net.neobp.speedment.ticketstack.public_.tickets.Tickets;

/**
 * The generated base implementation of the {@link
 * net.neobp.speedment.ticketstack.public_.tickets.Tickets}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedTicketsImpl implements Tickets {
    
    private String ticket;
    private String text;
    private Integer prio;
    private String tstate;
    
    protected GeneratedTicketsImpl() {
        
    }
    
    @Override
    public String getTicket() {
        return ticket;
    }
    
    @Override
    public Optional<String> getText() {
        return Optional.ofNullable(text);
    }
    
    @Override
    public OptionalInt getPrio() {
        return OptionalUtil.ofNullable(prio);
    }
    
    @Override
    public String getTstate() {
        return tstate;
    }
    
    @Override
    public Tickets setTicket(String ticket) {
        this.ticket = ticket;
        return this;
    }
    
    @Override
    public Tickets setText(String text) {
        this.text = text;
        return this;
    }
    
    @Override
    public Tickets setPrio(Integer prio) {
        this.prio = prio;
        return this;
    }
    
    @Override
    public Tickets setTstate(String tstate) {
        this.tstate = tstate;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("ticket = " + Objects.toString(getTicket()));
        sj.add("text = " + Objects.toString(OptionalUtil.unwrap(getText())));
        sj.add("prio = " + Objects.toString(OptionalUtil.unwrap(getPrio())));
        sj.add("tstate = " + Objects.toString(getTstate()));
        return "TicketsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Tickets)) { return false; }
        final Tickets thatTickets = (Tickets)that;
        if (!Objects.equals(this.getTicket(), thatTickets.getTicket())) {return false; }
        if (!Objects.equals(this.getText(), thatTickets.getText())) {return false; }
        if (!Objects.equals(this.getPrio(), thatTickets.getPrio())) {return false; }
        if (!Objects.equals(this.getTstate(), thatTickets.getTstate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getTicket());
        hash = 31 * hash + Objects.hashCode(getText());
        hash = 31 * hash + Objects.hashCode(getPrio());
        hash = 31 * hash + Objects.hashCode(getTstate());
        return hash;
    }
}