package net.neobp.speedment.ticketstack.public_.tickets.generated;

import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import java.util.OptionalInt;
import javax.annotation.Generated;
import net.neobp.speedment.ticketstack.public_.tickets.Tickets;

/**
 * The generated base for the {@link
 * net.neobp.speedment.ticketstack.public_.tickets.Tickets}-interface
 * representing entities of the {@code tickets}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedTickets {
    
    /**
     * This Field corresponds to the {@link Tickets} field that can be obtained
     * using the {@link Tickets#getTicket()} method.
     */
    final StringField<Tickets, String> TICKET = StringField.create(
        Identifier.TICKET,
        Tickets::getTicket,
        Tickets::setTicket,
        TypeMapper.identity(), 
        true
    );
    /**
     * This Field corresponds to the {@link Tickets} field that can be obtained
     * using the {@link Tickets#getText()} method.
     */
    final StringField<Tickets, String> TEXT = StringField.create(
        Identifier.TEXT,
        o -> OptionalUtil.unwrap(o.getText()),
        Tickets::setText,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Tickets} field that can be obtained
     * using the {@link Tickets#getPrio()} method.
     */
    final ComparableField<Tickets, Integer, Integer> PRIO = ComparableField.create(
        Identifier.PRIO,
        o -> OptionalUtil.unwrap(o.getPrio()),
        Tickets::setPrio,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Tickets} field that can be obtained
     * using the {@link Tickets#getTstate()} method.
     */
    final StringField<Tickets, String> TSTATE = StringField.create(
        Identifier.TSTATE,
        Tickets::getTstate,
        Tickets::setTstate,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the ticket of this Tickets. The ticket field corresponds to the
     * database column ticketstack.public.tickets.ticket.
     * 
     * @return the ticket of this Tickets
     */
    String getTicket();
    
    /**
     * Returns the text of this Tickets. The text field corresponds to the
     * database column ticketstack.public.tickets.text.
     * 
     * @return the text of this Tickets
     */
    Optional<String> getText();
    
    /**
     * Returns the prio of this Tickets. The prio field corresponds to the
     * database column ticketstack.public.tickets.prio.
     * 
     * @return the prio of this Tickets
     */
    OptionalInt getPrio();
    
    /**
     * Returns the tstate of this Tickets. The tstate field corresponds to the
     * database column ticketstack.public.tickets.tstate.
     * 
     * @return the tstate of this Tickets
     */
    String getTstate();
    
    /**
     * Sets the ticket of this Tickets. The ticket field corresponds to the
     * database column ticketstack.public.tickets.ticket.
     * 
     * @param ticket to set of this Tickets
     * @return       this Tickets instance
     */
    Tickets setTicket(String ticket);
    
    /**
     * Sets the text of this Tickets. The text field corresponds to the database
     * column ticketstack.public.tickets.text.
     * 
     * @param text to set of this Tickets
     * @return     this Tickets instance
     */
    Tickets setText(String text);
    
    /**
     * Sets the prio of this Tickets. The prio field corresponds to the database
     * column ticketstack.public.tickets.prio.
     * 
     * @param prio to set of this Tickets
     * @return     this Tickets instance
     */
    Tickets setPrio(Integer prio);
    
    /**
     * Sets the tstate of this Tickets. The tstate field corresponds to the
     * database column ticketstack.public.tickets.tstate.
     * 
     * @param tstate to set of this Tickets
     * @return       this Tickets instance
     */
    Tickets setTstate(String tstate);
    
    enum Identifier implements ColumnIdentifier<Tickets> {
        
        TICKET ("ticket"),
        TEXT ("text"),
        PRIO ("prio"),
        TSTATE ("tstate");
        
        private final String columnName;
        private final TableIdentifier<Tickets> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(getDbmsName(), getSchemaName(), getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "ticketstack";
        }
        
        @Override
        public String getSchemaName() {
            return "public";
        }
        
        @Override
        public String getTableName() {
            return "tickets";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Tickets> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}