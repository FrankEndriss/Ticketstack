package net.neobp.ticketstack.ticketstack.public_.resubs.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.config.db.mapper.identity.TimestampIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.field.StringForeignKeyField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import com.speedment.internal.core.field.StringForeignKeyFieldImpl;
import java.sql.Timestamp;
import java.util.Optional;
import javax.annotation.Generated;
import net.neobp.ticketstack.ticketstack.public_.resubs.Resubs;
import net.neobp.ticketstack.ticketstack.public_.tickets.Tickets;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table ticketstack.ticketstack.public.resubs.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedResubs extends Entity<Resubs> {
    
    /**
     * This Field corresponds to the {@link Resubs} field that can be obtained
     * using the {@link Resubs#getTicket()} method.
     */
    final StringForeignKeyField<Resubs, String, Tickets> TICKET = new StringForeignKeyFieldImpl<>(Identifier.TICKET, Resubs::getTicket, Resubs::setTicket, Resubs::findTicket, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Resubs} field that can be obtained
     * using the {@link Resubs#getResubts()} method.
     */
    final ComparableField<Resubs, Timestamp, Timestamp> RESUBTS = new ComparableFieldImpl<>(Identifier.RESUBTS, Resubs::getResubts, Resubs::setResubts, new TimestampIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Resubs} field that can be obtained
     * using the {@link Resubs#getText()} method.
     */
    final StringField<Resubs, String> TEXT = new StringFieldImpl<>(Identifier.TEXT, o -> o.getText().orElse(null), Resubs::setText, new StringIdentityMapper(), false);
    
    /**
     * Finds and returns the foreign key Entity {@link Tickets} referenced by the
     * field that can be obtained using {@link Resubs#getTicket()}.
     * <p>
     * N.B. The current implementation only supports lazy-loading of the
     * referenced Entities. This means that if you traverse N Resubs entities and
     * call this method for each one, there will be N SQL-queries executed.
     * 
     * @return the foreign key Entity {@link Tickets} referenced by the field
     * that can be obtained using {@link Resubs#getTicket()}
     */
    Tickets findTicket();
    
    /**
     * Returns the ticket of this Resubs. The ticket field corresponds to the
     * database column ticketstack.public.resubs.ticket.
     * 
     * @return the ticket of this Resubs
     */
    String getTicket();
    
    /**
     * Returns the resubts of this Resubs. The resubts field corresponds to the
     * database column ticketstack.public.resubs.resubts.
     * 
     * @return the resubts of this Resubs
     */
    Timestamp getResubts();
    
    /**
     * Returns the text of this Resubs. The text field corresponds to the
     * database column ticketstack.public.resubs.text.
     * 
     * @return the text of this Resubs
     */
    Optional<String> getText();
    
    /**
     * Sets the ticket of this Resubs. The ticket field corresponds to the
     * database column ticketstack.public.resubs.ticket.
     * 
     * @param ticket to set of this Resubs
     * @return this Resubs instance
     */
    Resubs setTicket(String ticket);
    
    /**
     * Sets the resubts of this Resubs. The resubts field corresponds to the
     * database column ticketstack.public.resubs.resubts.
     * 
     * @param resubts to set of this Resubs
     * @return this Resubs instance
     */
    Resubs setResubts(Timestamp resubts);
    
    /**
     * Sets the text of this Resubs. The text field corresponds to the database
     * column ticketstack.public.resubs.text.
     * 
     * @param text to set of this Resubs
     * @return this Resubs instance
     */
    Resubs setText(String text);
    
    enum Identifier implements FieldIdentifier<Resubs> {
        
        TICKET ("ticket"),
        RESUBTS ("resubts"),
        TEXT ("text");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "ticketstack";
        }
        
        @Override
        public String schemaName() {
            return "public";
        }
        
        @Override
        public String tableName() {
            return "resubs";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}