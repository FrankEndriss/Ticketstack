package net.neobp.ticketstack.ticketstack.public_.resubs.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import javax.annotation.Generated;
import net.neobp.ticketstack.ticketstack.public_.resubs.Resubs;
import net.neobp.ticketstack.ticketstack.public_.tickets.Tickets;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table ticketstack.ticketstack.public.resubs.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedResubsImpl extends AbstractBaseEntity<Resubs> implements Resubs {
    
    private String ticket;
    private Timestamp resubts;
    private String text;
    
    protected GeneratedResubsImpl() {
        
    }
    
    @Override
    public Tickets findTicket() {
        return managerOf_(Tickets.class).findAny(Tickets.TICKET, getTicket())
            .orElseThrow(() -> new SpeedmentException(
                "Foreign key constraint error. Tickets is set to " + getTicket()
                ));
            
    }
    
    @Override
    public String getTicket() {
        return ticket;
    }
    
    @Override
    public Timestamp getResubts() {
        return resubts;
    }
    
    @Override
    public Optional<String> getText() {
        return Optional.ofNullable(text);
    }
    
    @Override
    public final Resubs setTicket(String ticket) {
        this.ticket = ticket;
        return this;
    }
    
    @Override
    public final Resubs setResubts(Timestamp resubts) {
        this.resubts = resubts;
        return this;
    }
    
    @Override
    public final Resubs setText(String text) {
        this.text = text;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("ticket = "+Objects.toString(getTicket()));
        sj.add("resubts = "+Objects.toString(getResubts()));
        sj.add("text = "+Objects.toString(getText().orElse(null)));
        return "ResubsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Resubs)) { return false; }
        final Resubs thatResubs = (Resubs)that;
        if (!Objects.equals(this.getTicket(), thatResubs.getTicket())) {return false; }
        if (!Objects.equals(this.getResubts(), thatResubs.getResubts())) {return false; }
        if (!Objects.equals(this.getText(), thatResubs.getText())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getTicket());
        hash = 31 * hash + Objects.hashCode(getResubts());
        hash = 31 * hash + Objects.hashCode(getText());
        return hash;
    }
    
    @Override
    public Class<Resubs> entityClass() {
        return Resubs.class;
    }
}