package net.neobp.ticketstack.ticketstack.public_.resubs.generated;

import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import com.speedment.util.tuple.Tuple0;
import com.speedment.util.tuple.Tuples;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.stream.Stream;
import javax.annotation.Generated;
import net.neobp.ticketstack.ticketstack.public_.resubs.Resubs;
import net.neobp.ticketstack.ticketstack.public_.resubs.ResubsImpl;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table ticketstack.ticketstack.public.resubs.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedResubsManagerImpl extends AbstractSqlManager<Resubs> implements GeneratedResubsManager {
    
    private final static Tuple0 PRIMARY_KEY_CLASSES = Tuples.of();
    
    protected GeneratedResubsManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected Resubs newEntityFrom(ResultSet resultSet) throws SpeedmentException, SQLException {
        final Resubs entity = newEmptyEntity();
        try {
            entity.setTicket(resultSet.getString(1));
            entity.setResubts(resultSet.getTimestamp(2));
            entity.setText(resultSet.getString(3));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Resubs newEmptyEntity() {
        return new ResubsImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(Resubs entity, FieldIdentifier<Resubs> identifier) {
        switch ((Resubs.Identifier) identifier) {
            case TICKET : return entity.getTicket();
            case RESUBTS : return entity.getResubts();
            case TEXT : return entity.getText().orElse(null);
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(Resubs entity, FieldIdentifier<Resubs> identifier, Object value) {
        switch ((Resubs.Identifier) identifier) {
            case TICKET : entity.setTicket((String) value); break;
            case RESUBTS : entity.setResubts((Timestamp) value); break;
            case TEXT : entity.setText((String) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            Resubs.TICKET,
            Resubs.RESUBTS,
            Resubs.TEXT
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            
        );
    }
    
    @Override
    public Tuple0 getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
    
    @Override
    public Resubs newCopyOf(Resubs source) {
        final Resubs copy = new ResubsImpl() {
            @Override
            protected final Speedment speedment() {
                return speedment;
            }
        };
        
        copy.setTicket(source.getTicket());
        copy.setResubts(source.getResubts());
        source.getText().ifPresent(copy::setText);
        
        return copy;
    }
}