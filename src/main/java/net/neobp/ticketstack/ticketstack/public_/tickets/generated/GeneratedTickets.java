package net.neobp.ticketstack.ticketstack.public_.tickets.generated;

import com.speedment.Entity;
import com.speedment.config.db.mapper.identity.IntegerIdentityMapper;
import com.speedment.config.db.mapper.identity.StringIdentityMapper;
import com.speedment.field.ComparableField;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.StringField;
import com.speedment.internal.core.field.ComparableFieldImpl;
import com.speedment.internal.core.field.StringFieldImpl;
import java.util.Optional;
import java.util.stream.Stream;
import javax.annotation.Generated;
import net.neobp.ticketstack.ticketstack.public_.resubs.Resubs;
import net.neobp.ticketstack.ticketstack.public_.tickets.Tickets;

/**
 * The generated base interface representing an entity (for example, a row)
 * in the Table ticketstack.ticketstack.public.tickets.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public interface GeneratedTickets extends Entity<Tickets> {
    
    /**
     * This Field corresponds to the {@link Tickets} field that can be obtained
     * using the {@link Tickets#getTicket()} method.
     */
    final StringField<Tickets, String> TICKET = new StringFieldImpl<>(Identifier.TICKET, Tickets::getTicket, Tickets::setTicket, new StringIdentityMapper(), true);
    /**
     * This Field corresponds to the {@link Tickets} field that can be obtained
     * using the {@link Tickets#getText()} method.
     */
    final StringField<Tickets, String> TEXT = new StringFieldImpl<>(Identifier.TEXT, o -> o.getText().orElse(null), Tickets::setText, new StringIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Tickets} field that can be obtained
     * using the {@link Tickets#getPrio()} method.
     */
    final ComparableField<Tickets, Integer, Integer> PRIO = new ComparableFieldImpl<>(Identifier.PRIO, o -> o.getPrio().orElse(null), Tickets::setPrio, new IntegerIdentityMapper(), false);
    /**
     * This Field corresponds to the {@link Tickets} field that can be obtained
     * using the {@link Tickets#getTstate()} method.
     */
    final StringField<Tickets, String> TSTATE = new StringFieldImpl<>(Identifier.TSTATE, Tickets::getTstate, Tickets::setTstate, new StringIdentityMapper(), false);
    
    /**
     * Returns the ticket of this Tickets. The ticket field corresponds to the
     * database column ticketstack.public.tickets.ticket.
     * 
     * @return the ticket of this Tickets
     */
    String getTicket();
    
    /**
     * Returns the text of this Tickets. The text field corresponds to the
     * database column ticketstack.public.tickets.text.
     * 
     * @return the text of this Tickets
     */
    Optional<String> getText();
    
    /**
     * Returns the prio of this Tickets. The prio field corresponds to the
     * database column ticketstack.public.tickets.prio.
     * 
     * @return the prio of this Tickets
     */
    Optional<Integer> getPrio();
    
    /**
     * Returns the tstate of this Tickets. The tstate field corresponds to the
     * database column ticketstack.public.tickets.tstate.
     * 
     * @return the tstate of this Tickets
     */
    String getTstate();
    
    /**
     * Sets the ticket of this Tickets. The ticket field corresponds to the
     * database column ticketstack.public.tickets.ticket.
     * 
     * @param ticket to set of this Tickets
     * @return this Tickets instance
     */
    Tickets setTicket(String ticket);
    
    /**
     * Sets the text of this Tickets. The text field corresponds to the database
     * column ticketstack.public.tickets.text.
     * 
     * @param text to set of this Tickets
     * @return this Tickets instance
     */
    Tickets setText(String text);
    
    /**
     * Sets the prio of this Tickets. The prio field corresponds to the database
     * column ticketstack.public.tickets.prio.
     * 
     * @param prio to set of this Tickets
     * @return this Tickets instance
     */
    Tickets setPrio(Integer prio);
    
    /**
     * Sets the tstate of this Tickets. The tstate field corresponds to the
     * database column ticketstack.public.tickets.tstate.
     * 
     * @param tstate to set of this Tickets
     * @return this Tickets instance
     */
    Tickets setTstate(String tstate);
    
    /**
     * Creates and returns a {@link Stream} of all {@link Resubs} Entities that
     * references this Entity by the foreign key field that can be obtained using
     * {@link Resubs#getTicket()}. The order of the Entities are undefined and
     * may change from time to time.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.<p> N.B. The current
     * implementation supports lazy-loading of the referencing Entities.
     * 
     * @return a {@link Stream} of all {@link Resubs} Entities that references
     * this Entity by the foreign key field that can be obtained using {@link
     * Resubs#getTicket()}
     */
    Stream<Resubs> findResubsesByTicket();
    
    /**
     * Creates and returns a <em>distinct</em> {@link Stream} of all {@link
     * Resubs} Entities that references this Entity by a foreign key. The order
     * of the Entities are undefined and may change from time to time.
     * <p>
     * Note that the Stream is <em>distinct</em>, meaning that referencing
     * Entities will only appear once in the Stream, even though they may
     * reference this Entity by several columns.
     * <p>
     * Using this method, you may "walk the graph" and jump directly between
     * referencing Entities without using {@code JOIN}s.
     * <p>
     * N.B. The current implementation supports lazy-loading of the referencing
     * Entities.
     * 
     * @return a <em>distinct</em> {@link Stream} of all {@link Resubs} Entities
     * that references this Entity by a foreign key
     */
    Stream<Resubs> findResubses();
    
    enum Identifier implements FieldIdentifier<Tickets> {
        
        TICKET ("ticket"),
        TEXT ("text"),
        PRIO ("prio"),
        TSTATE ("tstate");
        
        private final String columnName;
        
        Identifier(String columnName) {
            this.columnName = columnName;
        }
        
        @Override
        public String dbmsName() {
            return "ticketstack";
        }
        
        @Override
        public String schemaName() {
            return "public";
        }
        
        @Override
        public String tableName() {
            return "tickets";
        }
        
        @Override
        public String columnName() {
            return this.columnName;
        }
    }
}